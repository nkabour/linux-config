file:///home/tsubase/vsProjects/webflow_library/dev/pages/challenges/team_profile/index.js {"mtime":1614271452127,"ctime":1614250468647,"size":3124,"etag":"36gp474as37o","orphaned":false}
document.getElementById("scriptLoader").style.display = "flex";


let challenge_id = "";
let challenge_doc;
let end_registration_date;
let hasTeam = false;
let hasSubmission = false;
let updateTeamProfile = false;

var thisUser = {};
var teamData = {};

let team_id = "";
var nRows = 0;
var maxNMembers = 5;
var tb_nCols = 0;
var leader_id = "";
var leader_row_id = "";
var thisIsLeader = false;
var accepted = false;
var leader_email = "";
var profileTable = {};

var updateProfileErrMsg = document.getElementById("error_message");
var add_member = document.getElementById("add_member");

firebase.auth().onAuthStateChanged(async function(user) {
    try {
        let params = window.location.search.slice(1).split("&");
        challenge_id = params[0].split("=")[1];
        team_id = params[1].split("=")[1];
        console.log("team id: ", team_id, "challenge id: ", challenge_id);
        challenge_doc = await db
            .collection("challenges")
            .doc(challenge_id)
            .get();

        end_registration_date = challenge_doc.data().end_time.toDate();
        //check if registation ended or not ... 
        if (new Date().getTime() > end_registration_date.getTime()) {
            document
                .getElementById("end_of_registration")
                .classList.remove("hide");
            document
                .getElementById("forms_section")
                .classList.add("hide");
            document.getElementById("registration_steps").classList.add("hide");
            return;

        }

        if (user) {
            thisUser = await db.collection("users").doc(user.uid).get();
            if (thisUser.exists) {
                add_member.onclick = () => addRow("team_tb");
                if (Object.keys(challenge_doc.data().teams).includes(team_id)) {
                    hasTeam = true;

                    let team_doc = await db.collection("teams").doc(team_id).get();
                    if (team_doc.exists) teamData = team_doc.data();
                    else hasTeam = false;
                    hasSubmission = teamData.hasOwnProperty("submission");
                }

                if (hasTeam) {X
                    document.getElementById("next_step_1").innerText =
                        "<  حفظ و تحديث";
                    document.getElementById("step_1_anchor").innerText =
                        "إدارة الفريق";
                }

                //determine in which step the user is supposed to be
                //activiate views that are already reached...
                //navigate to that step and render the data...
                 
                document.getElementById("scriptLoader").style.display = "none";
            } else window.location.replace(`./${challenge_doc.data().slug}`);
        } else window.location.replace(`./${challenge_doc.data().slug}`);

    } catch (e) {

        //any sort of error will just redirect to 404.
        console.error(
            "there was a problem loading the data for this page",
            e
        );
        window.location.replace("./404");
    }
});